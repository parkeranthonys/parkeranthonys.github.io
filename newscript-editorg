debug_mode = false

# Collection1 discount will have the same discount applied to all products
# Collection2 discount will be applied to products in order from most expensive to least expensive
# Products in both collections will be discounted as a Collection1 product, not a Collection2 product
# Collection2 should be unique to each discount, otherwise, multiple of the same product that are discounted seperately will appear as one item in the cart

config = {
    :collection_1 => {
    :collection_id  => '269140394056',
    :discount       => 25.00,
    :discount_type  => '%',
    :message => 'Take 25% Off Select Regular Priced Swim + Sweaters!'
  },
  :collection_2 => {
    :collection_id  => '268298518600',
    :discounts     => [25, 25, 25],
    :messages      => ['Take 25% Off 3 Regular Price Items - Exclusions Apply!', 'Take 25% Off 3 Regular Price Items - Exclusions Apply!', 'Take 25% Off 3 Regular Price Items - Exclusions Apply!'],
    :discount_type => '%'
  },
}

def setup_test(cart)
	cart.line_items[0].change_properties({
		'_collection_ids' => '366153542,2625798165',
	},
		message: 'Changing properties for testing',
	)
	cart.line_items[1].change_properties({
		'_collection_ids' => '366153542,2521694229',
	}, 
	  message: 'Changing properties for testing',
	)
	cart.line_items[2].change_properties({
		'_collection_ids' => '366153542,2521694229',
	},
		message: 'Changing properties for testing',
	)
end

if debug_mode
  setup_test(Input.cart);
end

def getDiscount(line_item, discount_type, discount_amount) 
  if discount_type == '%'
    calculated_discount_amount = line_item.line_price * (discount_amount / 100)
  else
    calculated_discount_amount = (Money.new(cents: discount_amount * 100)) * line_item.quantity
  end
  return calculated_discount_amount
end

# grab collection1 items
col1_items = Input.cart.line_items.select do |line_item|
  line_item.properties['_collection_ids'] && line_item.properties['_collection_ids'].split(',').include?(config[:collection_1][:collection_id])
end

# discount collection1 items
if col1_items.size > 0
  col1_items.each do |line_item|
    product = line_item.variant.product
            discount = getDiscount(line_item, config[:collection_1][:discount_type], config[:collection_1][:discount])
            if (product.product_type != "SALE") && (product.product_type != "CLEAR") && (product.vendor != "AVALIN")
            line_item.change_line_price(line_item.line_price - discount, message: config[:collection_1][:message])
        end
    end
end

  # grab collection2 items (but not items previously discounted in collection1)
  col2_items = Input.cart.line_items.select do |line_item|
    !line_item.line_price_changed? && line_item.properties['_collection_ids'] && line_item.properties['_collection_ids'].split(',').include?(config[:collection_2][:collection_id])
  end
  
  if col2_items.size > 0 
    # discount is applied from most expensive to least expensive
    col2_items = col2_items.sort_by { |li| -li.variant.price }
    
    # keep track of how many items to discount 
    # line items with multiple quantities will be split and discounted individually
    count = 0
    discounts_available = config[:collection_2][:discounts].size
    col2_items.each do |line_item|
      if count >= discounts_available
        break
      end
      if line_item.quantity > 1
          new_item = line_item.split(take: 1)
          discount = getDiscount(new_item, config[:collection_2][:discount_type], config[:collection_2][:discounts][count]) 
          new_item.change_line_price(new_item.line_price - discount, message: config[:collection_2][:messages][count])
        	# unshift sends the item to the beginning of the array, so that if we've pulled out 1 item from a 3 item LI, next loop we're dealing with the 2 item LI
          col2_items.unshift(new_item)
          Input.cart.line_items.insert(Input.cart.line_items.find_index(line_item), new_item)
          count = count + 1
      else
        discount = getDiscount(line_item, config[:collection_2][:discount_type], config[:collection_2][:discounts][count]) 
        line_item.change_line_price(line_item.line_price - discount, message: config[:collection_2][:messages][count])
        count = count + 1
      end
    end
  end
  
  Input.cart.line_items.each do | li |
      product = li.variant.product
      if product.product_type != "E-Gift Card"
        li.change_properties({},
          message: 'Remove properties',
        )
      end
  end

col2_items = []
Output.cart = Input.cart